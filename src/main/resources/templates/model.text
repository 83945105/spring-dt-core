package [[${setting.packagePath}]];

import com.dt.core.bean.*;
import com.dt.core.norm.Model;

import java.util.LinkedHashMap;
import java.util.Map;

public final class [[${setting.tableAlias}+${setting.templateSuffix}]] implements Model<[[${setting.tableAlias}+${setting.templateSuffix}]], [[${setting.tableAlias}+${setting.templateSuffix}]].Column, [[${setting.tableAlias}+${setting.templateSuffix}]].On, [[${setting.tableAlias}+${setting.templateSuffix}]].Where, [[${setting.tableAlias}+${setting.templateSuffix}]].Sort, [[${setting.tableAlias}+${setting.templateSuffix}]].Group> {

    public static final String tableName = [('"' + ${setting.tableName} + '"')];
    public static final String tableAlias = [('"' + ${setting.tableAlias} + '"')];
[# th:if="${setting.primaryKeyColumn != null}"]
    public static final String primaryKeyName = [('"' + ${setting.primaryKeyColumn.name} + '"')];
    public static final String primaryKeyAlias = [('"' + ${setting.primaryKeyColumn.alias} + '"')];
[/]
[# th:each="column : ${columns}"]
    [('public static final String '+ ${column.alias} + ' = "' + ${column.name} + '";')]
    [('public static final String '+ ${column.alias} + '_alias = "' + ${column.alias} + '";')]
[/]
    public static final Map<String, String> columnAliasMap = new LinkedHashMap<>();

    static {[# th:each="column : ${columns}"]
        [('columnAliasMap.put(' + ${column.alias} + ', ' + ${column.alias} + '_alias);')]
    [/]}

    public [[${setting.tableAlias}+${setting.templateSuffix}]]() {
    }

    @Override
    public String getTableName() {
        return tableName;
    }

    @Override
    public String getTableAlias() {
        return tableAlias;
    }

    @Override
    public String getPrimaryKeyName() {
        return primaryKeyName;
    }

    @Override
    public String getPrimaryKeyAlias() {
        return primaryKeyAlias;
    }

    @Override
    public ColumnModel<PubUserModel, Column, On, Where, Sort, Group> getColumn() {
        return new Column();
    }

    public static final class Column extends ColumnModel<[[${setting.tableAlias}+${setting.templateSuffix}]], Column, On, Where, Sort, Group> {

        private Column() {
        }
[# th:each="column : ${columns}"]
        [('public Column '+ ${column.alias} +'() {')]
            [('this.columns.put(' + ${setting.tableAlias}+${setting.templateSuffix} + '.' + ${column.alias} + ', ' + ${setting.tableAlias}+${setting.templateSuffix} + '.' + ${column.alias} + '_alias);')]
            [['return this;']]
        [['}']]

        [('public Column '+ ${column.alias} +'(String alias) {')]
            [('this.columns.put(' + ${setting.tableAlias}+${setting.templateSuffix} + '.' + ${column.alias} + ', alias);')]
            [['return this;']]
        [['}']]

    [/]}

    @Override
    public OnModel<PubUserModel, Column, On, Where, Sort, Group> getOn() {
        return new On();
    }

    public static final class On extends OnModel<PubUserModel, Column, On, Where, Sort, Group> {

        private On() {
        }

        public OnBuilder<PubUserModel, Column, On, Where, Sort, Group> id() {
            return this.onBuilder.handler(PubUserModel.tableName, PubUserModel.tableAlias, PubUserModel.id);
        }

        public OnBuilder<PubUserModel, Column, On, Where, Sort, Group> loginName() {
            return this.onBuilder.handler(PubUserModel.tableName, PubUserModel.tableAlias, PubUserModel.loginName);
        }
    }

    @Override
    public Where getWhere() {
        return new Where();
    }

    public static final class Where extends WhereModel<PubUserModel, Column, On, Where, Sort, Group> {

        private Where() {
        }

        public WhereBuilder<PubUserModel, Column, On, Where, Sort, Group> id() {
            return this.whereBuilder.handler(PubUserModel.tableName, PubUserModel.tableAlias, PubUserModel.id);
        }

        public WhereBuilder<PubUserModel, Column, On, Where, Sort, Group> loginName() {
            return this.whereBuilder.handler(PubUserModel.tableName, PubUserModel.tableAlias, PubUserModel.loginName);
        }

    }

    @Override
    public GroupModel getGroup() {
        return new Group();
    }

    public static final class Group extends GroupModel<PubUserModel, Column, On, Where, Sort, Group> {

        private Group() {
        }

        public Group id() {
            this.columns.add(PubUserModel.id);
            return this;
        }

        public Group loginName() {
            this.columns.add(PubUserModel.loginName);
            return this;
        }

    }

    @Override
    public SortModel getSort() {
        return new Sort();
    }

    public static final class Sort extends SortModel<PubUserModel, Column, On, Where, Sort, Group> {

        public SortBuilder<PubUserModel, Column, On, Where, Sort, Group> id() {
            return this.sortBuilder.handler(PubUserModel.id);
        }

        public SortBuilder<PubUserModel, Column, On, Where, Sort, Group> loginName() {
            return this.sortBuilder.handler(PubUserModel.loginName);
        }

    }

}